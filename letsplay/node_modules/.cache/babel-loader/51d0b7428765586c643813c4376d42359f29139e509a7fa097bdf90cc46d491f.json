{"ast":null,"code":"var _jsxFileName = \"/Users/shaylavi/Desktop/letsPlay /letsplay/src/pages/Stage2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Stage2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stage2() {\n  _s();\n  const queryParams = new URLSearchParams(window.location.search);\n  const players = parseInt(queryParams.get('players'), 10) || 1;\n  const mode = queryParams.get('mode');\n  const [playerNames, setPlayerNames] = useState(Array(players).fill(''));\n  const handleInputChange = (event, index) => {\n    const updatedPlayerNames = [...playerNames];\n    updatedPlayerNames[index] = event.target.value;\n    setPlayerNames(updatedPlayerNames);\n  };\n  function redirect() {\n    const namesQueryParam = encodeURIComponent(JSON.stringify(playerNames));\n    const queryParams = `?names=${namesQueryParam}`;\n    window.location.href = '/stage3' + queryParams;\n  }\n  const playerInputs = [];\n  for (let i = 0; i < players; i++) {\n    playerInputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__group field\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"input\",\n        className: \"form__field\",\n        placeholder: `Player ${i + 1} Name`,\n        name: `player${i}`,\n        id: `player${i}`,\n        required: true,\n        value: playerNames[i],\n        onChange: event => handleInputChange(event, i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `player${i}`,\n        className: \"form__label\",\n        children: `Player ${i + 1} Name`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stage1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textfield2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: playerInputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonletsplay\",\n        style: {\n          marginTop: '20px',\n          position: 'relative',\n          top: '80px'\n        },\n        onClick: redirect,\n        children: \"Let's start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(Stage2, \"xCJWBjbSHi759nyh5pj+FQswVic=\");\n_c = Stage2;\nexport default Stage2;\nvar _c;\n$RefreshReg$(_c, \"Stage2\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Stage2","_s","queryParams","URLSearchParams","window","location","search","players","parseInt","get","mode","playerNames","setPlayerNames","Array","fill","handleInputChange","event","index","updatedPlayerNames","target","value","redirect","namesQueryParam","encodeURIComponent","JSON","stringify","href","playerInputs","i","push","className","children","type","placeholder","name","id","required","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","style","marginTop","position","top","onClick","_c","$RefreshReg$"],"sources":["/Users/shaylavi/Desktop/letsPlay /letsplay/src/pages/Stage2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Stage2.css';\n\nfunction Stage2() {\n    const queryParams = new URLSearchParams(window.location.search);\n    const players = parseInt(queryParams.get('players'), 10) || 1;\n    const mode = queryParams.get('mode');\n\n    const [playerNames, setPlayerNames] = useState(Array(players).fill(''));\n\n    const handleInputChange = (event, index) => {\n        const updatedPlayerNames = [...playerNames];\n        updatedPlayerNames[index] = event.target.value;\n        setPlayerNames(updatedPlayerNames);\n    };\n\n    function redirect() {\n        const namesQueryParam = encodeURIComponent(JSON.stringify(playerNames));\n        const queryParams = `?names=${namesQueryParam}`;\n        window.location.href = '/stage3' + queryParams;\n    }\n\n    const playerInputs = [];\n\n    for (let i = 0; i < players; i++) {\n        playerInputs.push(\n            <div key={i} className=\"form__group field\">\n                <input\n                    type=\"input\"\n                    className=\"form__field\"\n                    placeholder={`Player ${i + 1} Name`}\n                    name={`player${i}`}\n                    id={`player${i}`}\n                    required\n                    value={playerNames[i]}\n                    onChange={(event) => handleInputChange(event, i)}\n                />\n                <label htmlFor={`player${i}`} className=\"form__label\">{`Player ${i + 1} Name`}</label>\n            </div>\n        );\n    }\n\n    return (\n        <div className='stage1'>\n            <div className='textfield2'>\n                <div>\n                    {playerInputs}\n                </div>\n                <button className='buttonletsplay' style={{ marginTop: '20px', position: 'relative' , top: '80px' }} onClick={redirect}>Let's start</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Stage2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}