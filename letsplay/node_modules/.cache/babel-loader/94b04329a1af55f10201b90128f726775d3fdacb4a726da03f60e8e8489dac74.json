{"ast":null,"code":"var _jsxFileName = \"/Users/shaylavi/Desktop/letsPlay /letsplay/src/pages/Stage4.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport data from '../assets/db.json';\nimport './Stage4.css';\nimport MatchCardP from '../components/MatchCardp';\nimport MatchCardS from '../components/MatchCards';\nimport MatchImage from '../components/MatchImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Stage4() {\n  _s();\n  const queryParams = new URLSearchParams(window.location.search);\n  const players = parseInt(queryParams.get('players'), 10) || 1;\n  const mode = queryParams.get('mode');\n  let names = queryParams.get('names');\n  const league = queryParams.get('league');\n  const rating = queryParams.get('rating');\n  const [selectedTeams, setSelectedTeams] = useState([]);\n  const [result, setResult] = useState([]);\n  function createSingleMatch(leagueName) {\n    const selectedLeague = data.leagues.find(l => l.name === leagueName);\n    if (selectedLeague) {\n      const teamsSelected = selectedLeague.teams.filter(team => team.rating === rating);\n      const selectedTeamss = [];\n      for (let i = 0; i < Math.min(players, teamsSelected.length); i++) {\n        let index = Math.floor(Math.random() * teamsSelected.length);\n        while (selectedTeamss.includes(teamsSelected[index])) {\n          index = Math.floor(Math.random() * teamsSelected.length);\n        }\n        selectedTeamss.push(teamsSelected[index]);\n      }\n      setSelectedTeams(selectedTeamss);\n      let res = [];\n      for (let i = 0; i < names.length && i < selectedTeamss.length; i++) {\n        res.push({\n          name: names[i],\n          team: selectedTeamss[i]\n        });\n      }\n      setResult(res);\n    }\n  }\n  function createPairsMatch(leagueName) {\n    const selectedLeague = data.leagues.find(l => l.name === leagueName);\n    if (selectedLeague) {\n      const teamsSelected = selectedLeague.teams.filter(team => team.rating === rating);\n      const selectedTeamss = [];\n      for (let i = 0; i < Math.min(players / 2, teamsSelected.length); i++) {\n        let index = Math.floor(Math.random() * teamsSelected.length);\n        while (selectedTeamss.includes(teamsSelected[index])) {\n          index = Math.floor(Math.random() * teamsSelected.length);\n        }\n        selectedTeamss.push(teamsSelected[index]);\n      }\n      setSelectedTeams(selectedTeamss);\n\n      // Shuffle the names array for unique pairs\n      const shuffledNames = [...names];\n      for (let i = shuffledNames.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledNames[i], shuffledNames[j]] = [shuffledNames[j], shuffledNames[i]];\n      }\n\n      // Group the shuffled names into pairs\n      let res = [];\n      while (shuffledNames.length >= 2) {\n        const name1 = shuffledNames.pop();\n        const name2 = shuffledNames.pop();\n        res.push({\n          name: {\n            name1,\n            name2\n          },\n          team: selectedTeamss.pop()\n        });\n      }\n      setResult(res);\n    }\n  }\n  function generateUniquePairs(namesArray) {\n    const pairs = [];\n    while (namesArray.length >= 2) {\n      const index1 = Math.floor(Math.random() * namesArray.length);\n      let index2 = Math.floor(Math.random() * (namesArray.length - 1));\n      if (index2 >= index1) {\n        index2++;\n      }\n      const name1 = namesArray[index1];\n      const name2 = namesArray[index2];\n      pairs.push({\n        name1,\n        name2\n      });\n      namesArray.splice(Math.max(index1, index2), 1);\n      namesArray.splice(Math.min(index1, index2), 1);\n    }\n    return pairs;\n  }\n  function playAgain(event) {\n    event.preventDefault();\n    const queryParams = `?names=${names}&players=${players}&mode=${mode}`;\n    window.location.href = '/stage3' + queryParams;\n  }\n  function reset(event) {\n    event.preventDefault();\n    window.location.href = '/stage1';\n  }\n  const clearState = () => {\n    setSelectedTeams([]);\n    setResult([]);\n  };\n  useEffect(() => {\n    clearState();\n    if (typeof names === 'string') {\n      names = names.split(',');\n    }\n    let res = [];\n    if (mode === 'singles') {\n      if (league === 'La liga') {\n        createSingleMatch('La liga');\n      }\n      if (league === 'Priemer league') {\n        createSingleMatch('Priemer league');\n      }\n      if (league === 'Bundesliga') {\n        createSingleMatch('Bundesliga');\n      }\n      if (league === 'Serie A') {\n        createSingleMatch('Serie A');\n      }\n      if (league === 'Ligue 1') {\n        createSingleMatch('Ligue 1');\n      }\n      if (league === 'International') {\n        createSingleMatch('International');\n      }\n      if (league === 'All') {\n        let selectedTeams = [];\n        for (let i = 0; i < names.length; i++) {\n          let leagueindex = Math.floor(Math.random() * data.leagues.length);\n          const selectedLeague = data.leagues[leagueindex];\n          if (selectedLeague) {\n            const teamsSelected = selectedLeague.teams.filter(team => team.rating === rating);\n            let index = Math.floor(Math.random() * teamsSelected.length);\n            while (selectedTeams.includes(teamsSelected[index])) {\n              index = Math.floor(Math.random() * teamsSelected.length);\n            }\n            selectedTeams.push(teamsSelected[index]);\n          }\n        }\n        setSelectedTeams(selectedTeams);\n        for (let i = 0; i < names.length; i++) {\n          res.push({\n            name: names[i],\n            team: selectedTeams[i]\n          });\n        }\n        setResult(res);\n      }\n    }\n    if (mode === 'pairs') {\n      if (league === 'La liga') {\n        createPairsMatch('La liga');\n      }\n      if (league === 'Priemer league') {\n        createPairsMatch('Priemer league');\n      }\n      if (league === 'Bundesliga') {\n        createPairsMatch('Bundesliga');\n      }\n      if (league === 'Serie A') {\n        createPairsMatch('Serie A');\n      }\n      if (league === 'Ligue 1') {\n        createPairsMatch('Ligue 1');\n      }\n      if (league === 'International') {\n        createPairsMatch('International');\n      }\n      if (league === 'All') {\n        let selectedTeamsa = [];\n        for (let i = 0; i < names.length; i++) {\n          let leagueindex = Math.floor(Math.random() * data.leagues.length);\n          const selectedLeague = data.leagues[leagueindex];\n          if (selectedLeague) {\n            const teamsSelected = selectedLeague.teams.filter(team => team.rating === rating);\n            let index = Math.floor(Math.random() * teamsSelected.length);\n            while (selectedTeams.includes(teamsSelected[index])) {\n              index = Math.floor(Math.random() * teamsSelected.length);\n            }\n            selectedTeamsa.push(teamsSelected[index]);\n          }\n        }\n\n        // Shuffle the names array for unique pairs\n        const shuffledNames = [...names];\n        for (let i = shuffledNames.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [shuffledNames[i], shuffledNames[j]] = [shuffledNames[j], shuffledNames[i]];\n        }\n\n        // Group the shuffled names into pairs\n        let res = [];\n        while (shuffledNames.length >= 2) {\n          const name1 = shuffledNames.pop();\n          const name2 = shuffledNames.pop();\n          res.push({\n            name: {\n              name1,\n              name2\n            },\n            team: selectedTeamss.pop()\n          });\n        }\n        setResult(res);\n      }\n    }\n  }, [mode, league, names, rating, players]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: result.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage1\",\n        style: {\n          overflow: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title4\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Starting matches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"match-cards-container\",\n          children: result.map((element, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"match-card-pair\",\n              children: element.name.name2 ? /*#__PURE__*/_jsxDEV(MatchCardP, {\n                name1: element.name.name1,\n                name2: element.name.name2,\n                team: element.team\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(MatchCardS, {\n                name: element.name,\n                team: element.team\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), index % 2 === 0 && /*#__PURE__*/_jsxDEV(MatchImage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 39\n            }, this)]\n          }, element.uniqueId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonletsplay\",\n            style: {\n              marginTop: '20px'\n            },\n            onClick: playAgain,\n            children: \"Play again with diffrent teams\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonletsplay\",\n            style: {\n              marginTop: '20px'\n            },\n            onClick: reset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Stage4, \"ozrxYFRtrLORERO+tulhyiyNCIk=\");\n_c = Stage4;\nexport default Stage4;\nvar _c;\n$RefreshReg$(_c, \"Stage4\");","map":{"version":3,"names":["React","useEffect","useState","data","MatchCardP","MatchCardS","MatchImage","jsxDEV","_jsxDEV","Fragment","_Fragment","Stage4","_s","queryParams","URLSearchParams","window","location","search","players","parseInt","get","mode","names","league","rating","selectedTeams","setSelectedTeams","result","setResult","createSingleMatch","leagueName","selectedLeague","leagues","find","l","name","teamsSelected","teams","filter","team","selectedTeamss","i","Math","min","length","index","floor","random","includes","push","res","createPairsMatch","shuffledNames","j","name1","pop","name2","generateUniquePairs","namesArray","pairs","index1","index2","splice","max","playAgain","event","preventDefault","href","reset","clearState","split","leagueindex","selectedTeamsa","children","className","style","overflow","fileName","_jsxFileName","lineNumber","columnNumber","map","element","uniqueId","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/shaylavi/Desktop/letsPlay /letsplay/src/pages/Stage4.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport data from '../assets/db.json';\nimport './Stage4.css';\nimport MatchCardP from '../components/MatchCardp';\nimport MatchCardS from '../components/MatchCards';\nimport MatchImage from '../components/MatchImage';\n\nfunction Stage4() {\n  const queryParams = new URLSearchParams(window.location.search);\n  const players = parseInt(queryParams.get('players'), 10) || 1;\n  const mode = queryParams.get('mode');\n  let names = queryParams.get('names');\n  const league = queryParams.get('league');\n  const rating = queryParams.get('rating');\n  const [selectedTeams, setSelectedTeams] = useState([]);\n  const [result, setResult] = useState([]);\n  function createSingleMatch(leagueName) {\n    const selectedLeague = data.leagues.find((l) => l.name === leagueName);\n    \n    if (selectedLeague) {\n      const teamsSelected = selectedLeague.teams.filter((team) => team.rating === rating);\n      \n      const selectedTeamss = [];\n  \n      for (let i = 0; i < Math.min(players, teamsSelected.length); i++) {\n        let index = Math.floor(Math.random() * teamsSelected.length);\n        while (selectedTeamss.includes(teamsSelected[index])) {\n          index = Math.floor(Math.random() * teamsSelected.length);\n        }\n        selectedTeamss.push(teamsSelected[index]);\n      }\n      setSelectedTeams(selectedTeamss)\n      let res = [];\n      for (let i = 0; i < names.length && i < selectedTeamss.length; i++) {\n        res.push({ name: names[i], team: selectedTeamss[i] });\n      }\n      setResult(res);\n    }\n  }\n  \n  function createPairsMatch(leagueName) {\n    const selectedLeague = data.leagues.find((l) => l.name === leagueName);\n  \n    if (selectedLeague) {\n      const teamsSelected = selectedLeague.teams.filter((team) => team.rating === rating);\n      const selectedTeamss = [];\n  \n      for (let i = 0; i < Math.min(players / 2, teamsSelected.length); i++) {\n        let index = Math.floor(Math.random() * teamsSelected.length);\n        while (selectedTeamss.includes(teamsSelected[index])) {\n          index = Math.floor(Math.random() * teamsSelected.length);\n        }\n        selectedTeamss.push(teamsSelected[index]);\n      }\n      setSelectedTeams(selectedTeamss);\n  \n      // Shuffle the names array for unique pairs\n      const shuffledNames = [...names];\n      for (let i = shuffledNames.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledNames[i], shuffledNames[j]] = [shuffledNames[j], shuffledNames[i]];\n      }\n  \n      // Group the shuffled names into pairs\n      let res = [];\n      while (shuffledNames.length >= 2) {\n        const name1 = shuffledNames.pop();\n        const name2 = shuffledNames.pop();\n        res.push({ name: { name1, name2 }, team: selectedTeamss.pop() });\n      }\n      setResult(res);\n    }\n  }\n  \n  function generateUniquePairs(namesArray) {\n    const pairs = [];\n    \n    while (namesArray.length >= 2) {\n      const index1 = Math.floor(Math.random() * namesArray.length);\n      let index2 = Math.floor(Math.random() * (namesArray.length - 1));\n      \n      if (index2 >= index1) {\n        index2++;\n      }\n      const name1 = namesArray[index1];\n      const name2 = namesArray[index2];\n      pairs.push({ name1, name2 });\n      namesArray.splice(Math.max(index1, index2), 1);\n      namesArray.splice(Math.min(index1, index2), 1);\n    }\n  \n    return pairs;\n  }\n  function playAgain(event) {\n    event.preventDefault(); \n\n    const queryParams = `?names=${names}&players=${players}&mode=${mode}`;\n    window.location.href = '/stage3' + queryParams;\n  }\n  function reset(event) {\n    event.preventDefault(); \n\n    window.location.href = '/stage1';\n  }\n\n  const clearState = () => {\n    setSelectedTeams([]);\n    setResult([]);\n  };\n\n  useEffect(() => {   \n    clearState();\n    if (typeof names === 'string') {\n      names = names.split(',');\n    }\n    let res = [];\n    if (mode === 'singles') {\n      if (league === 'La liga') {\n        createSingleMatch('La liga')\n        }\n      if (league === 'Priemer league') {\n          createSingleMatch('Priemer league')\n          }\n      if (league === 'Bundesliga') {\n            createSingleMatch('Bundesliga')\n            }\n      if (league === 'Serie A') {\n          createSingleMatch('Serie A')\n          }\n      if (league === 'Ligue 1') {\n            createSingleMatch('Ligue 1')\n        }\n      if (league === 'International') {\n          createSingleMatch('International')\n      }\n      if (league === 'All') {\n        let selectedTeams = [];\n        for(let i=0;i<names.length;i++)\n        {\n          let leagueindex = Math.floor(Math.random() * data.leagues.length);\n          const selectedLeague = data.leagues[leagueindex];\n          if (selectedLeague) {\n            const teamsSelected = selectedLeague.teams.filter((team) => team.rating === rating);\n            let index = Math.floor(Math.random() * teamsSelected.length);\n            while (selectedTeams.includes(teamsSelected[index])) {\n                index = Math.floor(Math.random() * teamsSelected.length);\n              }\n              selectedTeams.push(teamsSelected[index]);\n            }\n         }\n         setSelectedTeams(selectedTeams);\n         for (let i = 0; i < names.length; i++) {\n           res.push({ name: names[i], team: selectedTeams[i] });\n         }\n         setResult(res)\n      }\n    }\n    if (mode === 'pairs') {\n      if (league === 'La liga') {\n        createPairsMatch('La liga');\n      }\n      if (league === 'Priemer league') {\n        createPairsMatch('Priemer league');\n      }\n      if (league === 'Bundesliga') {\n        createPairsMatch('Bundesliga');\n      }\n      if (league === 'Serie A') {\n        createPairsMatch('Serie A');\n      }\n      if (league === 'Ligue 1') {\n        createPairsMatch('Ligue 1');\n      }\n      if (league === 'International') {\n        createPairsMatch('International');\n      }\n      if (league === 'All') {\n          let selectedTeamsa =[];\n          for(let i=0;i<names.length;i++)\n          {\n            let leagueindex = Math.floor(Math.random() * data.leagues.length);\n            const selectedLeague = data.leagues[leagueindex];\n            if (selectedLeague) {\n              const teamsSelected = selectedLeague.teams.filter((team) => team.rating === rating);\n              let index = Math.floor(Math.random() * teamsSelected.length);\n              while (selectedTeams.includes(teamsSelected[index])) {\n                  index = Math.floor(Math.random() * teamsSelected.length);\n                }\n                selectedTeamsa.push(teamsSelected[index]);\n              }\n          }      \n      \n          // Shuffle the names array for unique pairs\n          const shuffledNames = [...names];\n          for (let i = shuffledNames.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [shuffledNames[i], shuffledNames[j]] = [shuffledNames[j], shuffledNames[i]];\n          }\n      \n          // Group the shuffled names into pairs\n          let res = [];\n          while (shuffledNames.length >= 2) {\n            const name1 = shuffledNames.pop();\n            const name2 = shuffledNames.pop();\n            res.push({ name: { name1, name2 }, team: selectedTeamss.pop() });\n          }\n          setResult(res);\n      }\n    }\n  }, [mode, league, names, rating, players]);\n  return (\n    <>\n      {result.length > 0 ? (\n        <div>\n          <div className='stage1' style={{overflow:\"auto\"}}>\n            <p className='title4'><b>Starting matches</b></p>\n            <div className=\"match-cards-container\">\n            {result.map((element, index) => (\n                <React.Fragment key={element.uniqueId}>\n                  <div className=\"match-card-pair\">\n                    {element.name.name2 ? (\n                      <MatchCardP name1={element.name.name1} name2={element.name.name2} team={element.team} />\n                    ) : (\n                      <MatchCardS name={element.name} team={element.team} />\n                    )}\n                  </div>\n                  {index % 2 === 0 && <MatchImage />}\n                </React.Fragment>\n              ))}\n            </div>\n            <div className = \"buttons\">\n            <button className='buttonletsplay'  style={{ marginTop: '20px' }} onClick={playAgain}>Play again with diffrent teams</button>\n            <button className='buttonletsplay'  style={{ marginTop: '20px' }} onClick={reset}>Reset</button>\n            </div>\n            </div>\n        </div>\n      ) : (\n        <h1>loading</h1>\n      )}\n    </>\n  );\n}\n\nexport default Stage4;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}